// Code generated by go-bindata.
// sources:
// default.toml
// DO NOT EDIT!

package main

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _defaultToml = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x3c\x50\xcd\x8e\x9c\x30\x0c\xbe\xe7\x29\x2c\xf6\xd2\x1e\x48\xe8\x9e\xaa\x95\x38\xf4\x15\x7a\xaa\x34\x1a\xad\x4c\x62\x20\xdd\x90\x44\xb6\x19\x68\x9f\x7e\x05\x5a\x46\xb9\x38\xf6\xf7\xa7\xef\x16\x50\x71\x40\xa1\xbb\xa9\xa8\x33\xf4\xd0\xe4\xba\xd8\x30\x34\xc6\xdc\x96\xc8\x5c\xf8\x6e\x98\xa6\x28\xca\xff\x8e\xeb\xac\x5a\xe5\xcd\x39\xa6\x9a\xa2\x47\x25\x9b\xeb\xf2\x57\xac\x2f\x8b\xbb\x70\x8d\xf1\x25\xfb\x95\x99\xb2\x3f\x48\xaf\xdd\x53\xdc\x3e\x41\xae\x31\x2f\x10\xb3\x12\x3f\x30\xc1\x58\x18\xd6\x1a\x50\x49\xcc\x73\xd9\xc3\x8f\xd7\xce\x98\x9b\x10\x3f\x88\xef\x66\x88\x39\x1c\x22\x9d\x3d\x5f\x63\x6a\x61\x85\x1e\x7e\x76\xe6\x05\xe6\x22\x0a\x81\xc6\x98\x49\x40\x91\x07\x4c\x09\x56\x4e\x02\xdf\xce\x53\x19\xe1\xb2\xfe\x8a\x5c\x78\x72\x15\xfd\x07\x4e\xe4\xda\x6b\x6a\x1f\xc4\x12\x4b\xb6\x3a\xfd\xff\x6e\x4e\x66\x0f\x4d\x2a\x1e\xd3\xf1\x39\x42\x0b\xe5\x00\x7f\xda\x5f\xde\x53\x6a\x7f\x53\x88\x4c\x5e\x61\x26\x0c\xc4\xa0\x05\x7c\x8a\x94\x55\x40\x56\x3f\x03\x0a\xe4\x29\xe6\x1d\x30\x07\xc0\x8a\x7e\x26\x7b\x6a\xd0\x1b\x5c\x5d\x6e\xdb\x66\x4f\xd0\x57\x8b\x52\x56\xf6\x24\x6e\x8b\x1f\xd1\x89\x22\xab\xd3\x52\xa3\x17\x47\x3b\x2e\x35\x91\xb8\xbd\xc5\xc3\xde\x99\xfd\xfd\x1c\xde\xf9\xca\xd1\xc3\x88\x49\xc8\x7c\x06\x00\x00\xff\xff\x26\x62\x5d\x25\xda\x01\x00\x00")

func defaultTomlBytes() ([]byte, error) {
	return bindataRead(
		_defaultToml,
		"default.toml",
	)
}

func defaultToml() (*asset, error) {
	bytes, err := defaultTomlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "default.toml", size: 474, mode: os.FileMode(420), modTime: time.Unix(1490932982, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"default.toml": defaultToml,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}
var _bintree = &bintree{nil, map[string]*bintree{
	"default.toml": &bintree{defaultToml, map[string]*bintree{}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}

