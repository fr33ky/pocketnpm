// Code generated by go-bindata.
// sources:
// default.toml
// DO NOT EDIT!

package main

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _defaultToml = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x64\x92\xbd\x6e\xe3\x4a\x0c\x85\xfb\x79\x0a\x42\x6e\x92\x42\x1a\x27\x48\x11\x04\x50\x71\x6f\xbf\xcd\x56\x0b\x04\x81\x41\x8f\x68\x69\xd6\xf3\x07\x92\xb2\xe5\x3c\xfd\x42\xb3\x96\x9b\x85\x9a\x23\xf1\xe8\xcc\x47\x72\x3e\x07\x54\x3c\xa2\xd0\x97\xd9\xc1\xa6\xa1\xa0\x4e\xf0\x74\xcc\x41\x9f\x4d\xd5\x3d\x34\xa9\xc4\x6e\x38\x36\x66\x07\x11\x17\xf0\xa9\x8d\x14\x33\xdf\xc0\xa1\x9b\x08\xc4\x7f\x13\xf8\x04\x3f\xfe\x87\xa7\x3d\xf4\x30\xa7\xe0\xa3\x57\x1a\x9e\x4d\xc4\xe5\x50\x4d\x87\x6a\xea\xe1\x75\xff\xf6\x6e\x76\xff\x44\xd0\xc5\x3b\xf5\x39\x81\xfa\x58\xb3\xa2\x4f\xb3\x92\x98\xbf\x3f\x07\x7f\xa2\x5a\xe9\xe1\xe5\xed\x6d\x6f\xcc\x67\xf4\xcc\x99\xbf\x0c\xd3\xe8\x45\xf9\xb6\x52\x4e\xaa\x45\x3e\xac\x65\x2a\xc1\x3b\x54\xea\x52\x89\xbf\xa5\x73\x39\xda\xcd\xd7\x18\x97\x93\x9b\x99\x29\xb9\x5b\xe5\x79\x34\xd9\x3d\x4c\xb6\xa9\x88\x4a\x7c\xc1\x00\xa7\xcc\x30\x97\x01\x57\x9c\xc7\xc7\x1e\x5e\x5e\x57\x0e\x21\xbe\x10\x7f\x99\xa3\x4f\xc3\x1a\xb2\xef\xea\xd3\x98\x92\x59\xa1\x87\xf7\xbd\xd9\x81\xb8\x89\x22\x01\xa6\x01\xa6\x2c\x0a\x9a\x21\xe2\x99\x40\x91\x8f\x18\x02\xcc\x1c\x04\x9e\x6a\x29\x9f\x60\xa3\xb8\xd3\x67\x1e\x6d\x41\x77\xc6\x91\x6c\xbb\xa9\xf6\x42\x2c\x3e\xa7\x4e\xc7\xef\x67\x73\xcf\xbf\x8f\xa0\x31\x35\xa9\x87\x26\x64\x87\x61\x7d\x59\xfb\x11\x4a\x03\xfc\x6a\xff\x73\x8e\x42\xfb\x93\x06\xcf\xe4\x14\x26\xc2\x81\x78\x25\x72\xc1\x53\x52\x01\x99\xdd\x04\x28\x90\x46\x9f\x96\xca\x8c\x65\x5d\x42\x57\x33\xe8\x03\xb6\x31\x5f\xaf\xd7\xae\x9a\xee\x03\x96\x3c\xb3\x23\xb1\x57\x7f\xf6\x56\x14\x59\xad\xe6\xe2\x9d\x58\x5a\x30\x96\x40\x62\x97\x16\xd7\xe3\xad\x59\x0e\x55\x1c\x78\xe3\xe8\xe1\x84\x41\xc8\x84\x3c\x6e\xfb\x28\xd9\x9d\x49\xd7\xab\xb7\x7a\x45\xba\x90\xc7\xc6\xfc\x09\x00\x00\xff\xff\x1e\x0c\xca\x81\xb5\x02\x00\x00")

func defaultTomlBytes() ([]byte, error) {
	return bindataRead(
		_defaultToml,
		"default.toml",
	)
}

func defaultToml() (*asset, error) {
	bytes, err := defaultTomlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "default.toml", size: 693, mode: os.FileMode(420), modTime: time.Unix(1491217916, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"default.toml": defaultToml,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}
var _bintree = &bintree{nil, map[string]*bintree{
	"default.toml": &bintree{defaultToml, map[string]*bintree{}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}

