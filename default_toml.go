// Code generated by go-bindata.
// sources:
// default.toml
// DO NOT EDIT!

package main

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _defaultToml = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x64\x53\x5b\x8b\xf3\x38\x0c\x7d\xf7\xaf\x10\x29\x2c\x2d\x7c\x89\xfb\x0d\x7d\x18\x0a\x66\x2f\xef\xfb\xb2\xcc\xc3\xc2\x50\x8a\xe3\xa8\x89\xa7\xbe\xad\xa5\xf4\x32\xbf\x7e\xb1\xa7\x29\x03\x1f\x01\x23\x4b\x27\x47\x27\x3a\xca\xfb\xa0\x59\xf7\x9a\xf0\x20\x56\xb0\xc4\xc0\xf7\x84\xb0\xee\xa3\xe3\x1f\x30\xc6\xec\x37\xa2\x66\x14\x34\x25\xd7\x7c\x87\x26\xcd\x93\x28\x47\xa9\x86\xe4\xbb\xa1\x2f\x75\xbc\x69\x9f\x1c\xc2\x4c\x7a\x44\x38\xc5\x5c\x79\x60\x3d\x31\xa7\xbd\x94\x1f\x36\x7c\x4e\x73\xe7\x51\x96\xb4\x5c\xd8\xba\x89\xbd\x5b\x99\x18\x02\x1a\xb6\x61\x6c\x39\xb6\xba\x5d\xaa\x9b\xbd\x58\xc1\xa3\xd5\x7b\xe3\xef\xf4\x9f\x6b\x7e\x40\x33\x13\xe6\x7d\xd2\x44\xd7\x98\x87\x3f\xd8\xa4\xf5\x14\x89\xf7\x29\x66\xde\xc8\xa1\x0f\xda\xe3\xef\x66\xd2\x99\x90\xd5\xcc\xa7\x57\xdf\xef\x7e\x4b\xe5\xfa\x66\x3d\xaa\xb7\x3c\x63\x73\x80\x15\x54\xbe\xef\x0d\x52\x24\x1e\x33\x52\xe9\x51\x18\x55\x39\xa0\x74\x53\xe5\x28\xbc\xf0\x45\xaf\x52\x34\x67\xe4\x90\x3c\x10\x39\x1f\x07\x54\x83\x25\xdd\xbb\x32\x9e\x2f\x5d\xca\xdf\x97\xb0\x39\x08\xb1\x02\xaf\x6f\x60\x43\xeb\xd1\xc7\x7c\x07\xa3\xcd\x84\x40\xf6\x13\xc1\x06\xf8\xfb\x2f\x58\x6f\x41\xc1\x1c\x9c\xf5\x96\x71\xd8\x08\xaf\x6f\xc7\x0a\x3a\x56\x90\x82\x97\xed\xee\x55\xac\x7e\xa1\xc0\x8b\x35\x6c\x63\x00\xb6\xbe\x72\x79\x1b\x66\x46\x12\x5f\x2f\x3b\x7b\xc2\x5a\x51\xf0\x73\xb7\xdb\x0a\xf1\xee\x6d\xce\x31\x1f\x44\xc6\xd1\x12\xe7\x7b\xb1\xb1\x98\x44\x7b\x29\x33\x26\x67\x8d\x66\xec\x42\xf2\x1f\xd4\x99\xe8\xe5\x82\x6b\x84\x89\xc1\xcc\x39\x63\x30\xf7\xaa\xe7\xb9\x05\xdd\x13\x24\x9b\x2a\x91\x31\x5f\xb4\xab\x5b\x30\xa7\x41\x17\x39\xcf\xa4\x82\x9f\x2f\x45\x07\x61\xbe\x60\x3e\x88\xde\x86\xa1\x90\x6c\xbb\xfa\x34\xa2\xf8\x08\x0a\x5e\xb7\x62\x05\x64\x26\xf4\x08\x3a\x0c\x50\xcd\xe0\x08\x5e\x9f\x11\x58\xe7\x5e\x3b\x07\x73\x76\x04\xd5\x7e\x88\x27\x58\x54\x3c\xd4\xc7\x3c\xca\xa4\xcd\x59\x8f\x28\xdb\x25\x6a\x2f\x98\xc9\xc6\xd0\xf1\xf8\xb9\x11\x0f\xfe\xc7\x08\x1a\x51\x99\x14\x34\x2e\x1a\xed\xca\xa5\x7c\x0f\x61\x18\xe0\xdf\xf6\x4f\x63\xd0\xb5\xff\xe0\x60\x33\x1a\x86\x09\xf5\x80\xb9\x28\x32\xce\x62\x60\x02\x9a\xcd\x04\x9a\x20\x8c\x36\xdc\xaa\x66\x9d\x8a\x09\x5d\xe5\xc0\x3d\x2c\x63\xbe\x5e\xaf\x5d\x05\x3d\x06\x4c\x71\xce\x06\x49\x5e\xed\xd9\x4a\x62\x9d\x59\x72\x4c\xd6\x90\x7c\xfc\x55\x24\x6f\xad\x2e\xed\xa5\xb8\x1d\x6b\x70\xcc\x8b\x0e\x05\x27\xed\x08\x85\x8b\xe3\xe2\xc7\x73\x3b\xbb\x82\x25\xea\x5c\x1c\x1b\xf1\x7f\x00\x00\x00\xff\xff\xf1\x6f\x30\x2a\xfa\x03\x00\x00")

func defaultTomlBytes() ([]byte, error) {
	return bindataRead(
		_defaultToml,
		"default.toml",
	)
}

func defaultToml() (*asset, error) {
	bytes, err := defaultTomlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "default.toml", size: 1018, mode: os.FileMode(436), modTime: time.Unix(1491489938, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"default.toml": defaultToml,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}
var _bintree = &bintree{nil, map[string]*bintree{
	"default.toml": &bintree{defaultToml, map[string]*bintree{}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}

