// Code generated by go-bindata. DO NOT EDIT.
// sources:
// default.toml

package main

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  fileInfoEx
}

type fileInfoEx interface {
	os.FileInfo
	MD5Checksum() string
}

type bindataFileInfo struct {
	name        string
	size        int64
	mode        os.FileMode
	modTime     time.Time
	md5checksum string
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) MD5Checksum() string {
	return fi.md5checksum
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _defaultToml = []byte(
	"\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x4c\x92\x4d\x6f\xdb\x3c\x0c\xc7\xef\xfa\x14\x84\x03\x3c\x68\x0f\x96\xd2" +
	"\x9e\x1e\x04\x30\x86\x7d\x85\x9d\x06\x14\x45\xc1\xc8\x8c\xad\x45\x16\x05\x92\x4e\xd2\x7d\xfa\xc1\x6e\x9c\x0d\xbe" +
	"\xd0\x7c\xf9\xeb\xc7\x97\xb7\x1e\x0d\x8f\xa8\xf4\xee\x76\x10\x47\x8a\x67\xc8\x49\x0d\xf8\x04\x78\xc1\x94\xf1\x98" +
	"\x09\xa8\x0c\xa9\x90\x1e\xdc\x0e\x60\x34\xab\x7a\x08\x21\xcf\xa5\x7c\xfa\x21\xd9\x91\xf9\xac\x3e\x71\xb8\xb1\x4c" +
	"\xed\x84\x65\xc6\xdc\x52\x69\x67\x0d\x91\x8b\x51\xb1\x10\x47\xac\x46\xd2\xee\x5f\x42\x2a\x3d\xdd\xfc\x68\x53\x76" +
	"\xbd\xa4\x0b\x09\x74\xd0\x54\x56\x1b\x84\xb4\x71\xca\xb3\x44\xfa\xd7\x77\x08\xe1\x5b\x7f\xfc\x28\x38\x51\x57\x39" +
	"\x9e\xc9\x4a\x9d\xfe\x9b\x95\xa4\xfb\x5b\xe6\xde\xa6\x24\xc2\xf2\xee\x84\x86\xa4\x26\x9f\x8b\xc4\x86\x2a\x54\x73" +
	"\x8a\x68\xe4\x4b\x9d\x7e\xa9\x8f\x3c\x85\x2d\xaf\x71\x91\x4b\x9c\x45\xa8\xc4\xa5\xe8\x75\xef\x76\xa0\xc6\x82\x03" +
	"\x41\x45\x1b\xe1\xa9\x4f\x42\xd1\x58\x3e\x9f\xdd\xea\xe8\xa0\xf1\x8f\xfa\xd0\xb8\x1d\xa4\x62\x24\x17\xcc\x70\x62" +
	"\xf9\x1a\x62\x2a\x03\xcc\xb5\x47\x23\x75\x8f\x68\x07\x2f\xaf\x7b\xe7\xde\x94\xe4\x42\xf2\xee\x8e\xa9\xf4\x8b\xda" +
	"\xde\xaf\x5f\xe3\x2a\x8b\x41\x07\xff\xaf\x0c\x71\xa4\x89\x00\x4b\x0f\x23\xab\x81\x31\x4c\x78\x26\x30\x94\x23\xe6" +
	"\x0c\xb3\x64\x85\xa7\x35\xc4\x27\xd8\x70\xee\x1d\xb2\x0c\xa1\x62\x3c\xe3\x40\xa1\xdd\xac\xf6\x42\xa2\x89\x8b\xb7" +
	"\xe1\xf7\xb3\xbb\xeb\xdf\xc7\xd4\xb8\x55\xa9\x83\x26\x73\xc4\xbc\xfc\x2c\x8d\x29\x95\x1e\x7e\xb6\xdf\x63\xa4\xdc" +
	"\xfe\xa0\xaf\x49\xc0\x48\xd8\x93\x2c\x44\x31\x27\x2a\xa6\xa0\x73\x1c\x01\x15\x96\x3b\xb9\xad\xcc\x58\x31\x8e\xe4" +
	"\x57\x0d\x3a\x3c\xae\xe6\x7a\xbd\xfa\x35\xe9\xbe\x84\xaf\x7d\x6b\xb8\xa6\x73\x0a\x6a\x28\x16\x8c\x6b\x8a\x1a\xe8" +
	"\x86\x53\xcd\xa4\xe1\xd6\xe2\xf2\x7c\x70\xb7\x8f\xd5\xf8\x90\x8d\xa3\x83\x13\x66\x25\x97\x79\xd8\x16\xf3\xb8\x10" +
	"\xbf\xe4\xaa\xfa\xcc\x43\xe3\xfe\x04\x00\x00\xff\xff\x66\x90\x85\x5d\xe5\x02\x00\x00")

func defaultTomlBytes() ([]byte, error) {
	return bindataRead(
		_defaultToml,
		"default.toml",
	)
}

func defaultToml() (*asset, error) {
	bytes, err := defaultTomlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "default.toml", size: 741, md5checksum: "", mode: os.FileMode(420), modTime: time.Unix(1511082896, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, &os.PathError{Op: "open", Path: name, Err: os.ErrNotExist}
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
// nolint: deadcode
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, &os.PathError{Op: "open", Path: name, Err: os.ErrNotExist}
}

// AssetNames returns the names of the assets.
// nolint: deadcode
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"default.toml": defaultToml,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, &os.PathError{Op: "open", Path: name, Err: os.ErrNotExist}
			}
		}
	}
	if node.Func != nil {
		return nil, &os.PathError{Op: "open", Path: name, Err: os.ErrNotExist}
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}

var _bintree = &bintree{nil, map[string]*bintree{
	"default.toml": {defaultToml, map[string]*bintree{}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	return os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}
