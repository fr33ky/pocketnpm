// Code generated by go-bindata.
// sources:
// default.toml
// DO NOT EDIT!

package main

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _defaultToml = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x3c\x91\xbf\xae\xe2\x3c\x10\xc5\x7b\x3f\xc5\x28\x34\x50\x24\xe6\xbb\xfa\x8a\xab\x2b\xa5\xd8\xed\xb7\xd9\x6a\x25\x84\xd0\xe0\x0c\xc4\x8b\xff\x69\x66\x02\xe1\x3e\xfd\x2a\x16\x41\x6e\x8e\xed\xa3\x33\x3f\x1f\x1f\x06\x54\x3c\xa3\xd0\xd1\x6c\x60\xd5\x50\x50\x47\xd8\x9e\x73\xd0\x9d\xa9\xba\x87\x26\x95\xd8\x0d\xe7\xc6\x6c\x20\xe2\x0c\x3e\xb5\x91\x62\xe6\x27\x38\x74\x23\x81\xf8\x6f\x02\x9f\xe0\xd7\x4f\xd8\xee\xa1\x87\x29\x05\x1f\xbd\xd2\xb0\x33\x11\xe7\x53\x35\x9d\xaa\xa9\x87\x8f\xfd\xff\x9f\xc6\x1c\xa2\x67\xce\x7c\x34\x4c\x57\x2f\xca\xcf\x65\xc8\xa8\x5a\xe4\xcb\x5a\xa6\x12\xbc\x43\xa5\x2e\x95\xf8\x57\x3a\x97\xa3\x5d\x7d\x8d\x71\x39\xb9\x89\x99\x92\x7b\xd6\xb8\x37\x63\xf7\x36\xd9\x05\xd4\x27\x25\xbe\x63\x80\x4b\x66\x98\xca\x80\x4a\x62\xde\x87\x3d\xfc\xf7\xb1\x37\xe6\x20\xc4\x77\xe2\xa3\x39\xfb\x34\x2c\x21\xfb\xae\xae\xc6\x94\xcc\x0a\x3d\x7c\xee\xcd\x06\xc4\x8d\x14\x09\x30\x0d\x30\x66\x51\xd0\x0c\x11\x6f\x04\x8a\x7c\xc6\x10\x60\xe2\x20\xb0\xad\x57\xf9\x02\x2b\xc5\x8b\x3e\xf3\xd5\x16\x74\x37\xbc\x92\x6d\x57\xd5\xde\x89\xc5\xe7\xd4\xe9\xf5\x7b\x67\x5e\xf9\xaf\x0a\x1a\x53\x93\x7a\x68\x42\x76\x18\x96\xcd\xf2\x1e\xa1\x34\xc0\x9f\xf6\x87\x73\x14\xda\xdf\x34\x78\x26\xa7\x30\x12\x0e\xc4\x0b\x91\x0b\x9e\x92\x0a\xc8\xe4\x46\x40\x81\x74\xf5\x69\xae\xcc\x58\x96\x0f\xe8\x6a\x06\x7d\xc1\x5a\xf3\xe3\xf1\xe8\xaa\xe9\x55\xb0\xe4\x89\x1d\x89\x7d\xf8\x9b\xb7\xa2\xc8\x6a\x35\x17\xef\xc4\xd2\x8c\xb1\x04\x12\x3b\xb7\xb8\x8c\xb7\x66\x3e\x55\x71\xe2\x95\xa3\x87\x0b\x06\x21\xf3\x2f\x00\x00\xff\xff\xb7\xa5\x01\x94\x53\x02\x00\x00")

func defaultTomlBytes() ([]byte, error) {
	return bindataRead(
		_defaultToml,
		"default.toml",
	)
}

func defaultToml() (*asset, error) {
	bytes, err := defaultTomlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "default.toml", size: 595, mode: os.FileMode(420), modTime: time.Unix(1491186057, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"default.toml": defaultToml,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}
var _bintree = &bintree{nil, map[string]*bintree{
	"default.toml": &bintree{defaultToml, map[string]*bintree{}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}

