// Code generated by go-bindata.
// sources:
// default.toml
// DO NOT EDIT!

package main

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _defaultToml = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x64\x91\xbd\x8e\xe3\x3a\x0c\x85\x7b\x3d\x05\xe1\x34\x33\x85\xad\xcc\x20\xc5\x60\x00\x17\xf7\xf6\xdb\x6c\xb5\xc0\x20\x08\x18\x99\x89\xb5\xd1\x1f\x48\x3a\x71\xe6\xe9\x17\xd6\xc6\x69\x16\x6a\x8e\xc4\xa3\xa3\x8f\xd4\xd7\x80\x8a\x47\x14\xda\x9b\x0d\xac\x1a\x0a\xea\x08\x2f\xc7\x1c\xf4\xd5\x54\xdd\x43\x93\x4a\xec\x86\x63\x63\x36\x10\x71\x06\x9f\xda\x48\x31\xf3\x1d\x1c\xba\x91\x40\xfc\x37\x81\x4f\xf0\xe3\x7f\x78\xd9\x42\x0f\x53\x0a\x3e\x7a\xa5\xe1\xd5\x44\x9c\x0f\xd5\x74\xa8\xa6\x1e\xde\xb7\xbb\x0f\xb3\xf9\x27\x82\xae\xde\xa9\xcf\x09\xd4\xc7\x9a\x15\x7d\x9a\x94\xc4\xfc\xbd\x1c\xfc\x89\x6a\xa5\x87\xb7\xdd\x6e\x6b\xcc\x57\xf4\xcc\x99\xf7\x86\xe9\xec\x45\xf9\xbe\x50\x8e\xaa\x45\x3e\xad\x65\x2a\xc1\x3b\x54\xea\x52\x89\xbf\xa5\x73\x39\xda\xd5\xd7\x18\x97\x93\x9b\x98\x29\xb9\x7b\xe5\x79\x36\xd9\x3d\x4d\xb6\xa9\x88\x4a\x7c\xc5\x00\xa7\xcc\x30\x95\x01\x17\x9c\xe7\x61\x0f\x6f\xef\x0b\x87\x10\x5f\x89\xf7\xe6\xe8\xd3\xb0\x84\x6c\xbb\xba\x1a\x53\x32\x2b\xf4\xf0\xb1\x35\x1b\x10\x37\x52\x24\xc0\x34\xc0\x98\x45\x41\x33\x44\xbc\x10\x28\xf2\x11\x43\x80\x89\x83\xc0\x4b\x2d\xe5\x13\xac\x14\x0f\xfa\xcc\x67\x5b\xd0\x5d\xf0\x4c\xb6\x5d\x55\x7b\x25\x16\x9f\x53\xa7\xe7\xef\x57\xf3\xc8\x7f\x8c\xa0\x31\x35\xa9\x87\x26\x64\x87\x61\xd9\x2c\xfd\x08\xa5\x01\x7e\xb5\xff\x39\x47\xa1\xfd\x49\x83\x67\x72\x0a\x23\xe1\x40\xbc\x10\xb9\xe0\x29\xa9\x80\x4c\x6e\x04\x14\x48\x67\x9f\xe6\xca\x8c\x65\xf9\x84\xae\x66\xd0\x27\xac\x63\xbe\xdd\x6e\x5d\x35\x3d\x06\x2c\x79\x62\x47\x62\x6f\xfe\xe2\xad\x28\xb2\x5a\xcd\xc5\x3b\xb1\x34\x63\x2c\x81\xc4\xce\x2d\x2e\xcf\x5b\x33\x1f\xaa\x38\xf0\xca\xd1\xc3\x09\x83\x90\xf9\x13\x00\x00\xff\xff\xfd\xeb\x12\x47\x94\x02\x00\x00")

func defaultTomlBytes() ([]byte, error) {
	return bindataRead(
		_defaultToml,
		"default.toml",
	)
}

func defaultToml() (*asset, error) {
	bytes, err := defaultTomlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "default.toml", size: 660, mode: os.FileMode(420), modTime: time.Unix(1491197300, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"default.toml": defaultToml,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}
var _bintree = &bintree{nil, map[string]*bintree{
	"default.toml": &bintree{defaultToml, map[string]*bintree{}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}

