// Code generated by go-bindata. DO NOT EDIT.
// sources:
// default.toml

package main

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  fileInfoEx
}

type fileInfoEx interface {
	os.FileInfo
	MD5Checksum() string
}

type bindataFileInfo struct {
	name        string
	size        int64
	mode        os.FileMode
	modTime     time.Time
	md5checksum string
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) MD5Checksum() string {
	return fi.md5checksum
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _defaultToml = []byte(
	"\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x64\x52\xbb\x8e\xdc\x3a\x0c\xed\xf5\x15\x84\xa7\xd9\x05\xae\xad\xb9\x7b" +
	"\x1f\x08\x06\x70\x91\x3f\x08\x52\x05\x58\x6c\xc1\x91\x39\xb6\x32\xb2\x28\x90\xf4\x3c\x52\xe4\xdb\x03\x79\x1e\x29" +
	"\x02\x37\xb4\x24\x1e\x9e\x73\x78\xde\x07\x34\xdc\xa3\xd2\x87\xdb\x40\x98\x28\x1c\x21\x45\x35\xe0\x03\xe0\x09\x63" +
	"\xc2\x7d\x22\xa0\x3c\xc6\x4c\xba\x73\x1b\x80\xc9\xac\xe8\xce\xfb\xb4\xe4\x7c\xed\xc6\x68\x7b\xe6\xa3\x76\x91\xfd" +
	"\x85\x65\x6e\x67\xcc\x0b\xa6\x96\x72\xbb\xa8\x0f\x9c\x8d\xb2\xf9\x30\x61\x31\x92\x76\xfb\xb7\x8f\x79\xa0\x4b\x37" +
	"\xd9\x9c\xdc\x20\xf1\x44\x02\x3d\x34\x85\xd5\x46\x21\x6d\x9c\xf2\x22\x81\xea\xd9\xc4\x6a\x7d\xe2\x80\xa9\x56\x50" +
	"\x58\xac\xff\xef\xdf\x7f\xde\x60\x51\x92\x3e\x97\x19\x0a\xaa\x9e\x59\x86\xf5\x67\xd8\x67\x9c\xa9\x96\x8d\x73\xef" +
	"\x73\x14\x61\xf9\x70\x42\x63\x54\x93\xeb\x0a\x78\x27\x2e\x54\x52\x0c\x68\xd4\xe5\x32\x7f\xd7\x2e\xf0\xec\x1f\xef" +
	"\x1a\x17\x38\x87\x45\x84\x72\xa8\x4d\x6f\x5b\xb7\x01\x35\x16\x1c\x09\x0a\xda\x04\x2f\x43\x14\x0a\xc6\x72\x7d\x75" +
	"\xeb\x41\x0f\x4d\xf7\xec\xf7\x8d\xdb\x40\xcc\x46\x72\xc2\x04\x07\x96\x9b\xa5\x31\x8f\xb0\x94\x01\x8d\xd4\x3d\x6f" +
	"\x7b\xf8\x7f\xeb\xdc\xbb\x92\x9c\x48\x3e\xdc\x3e\xe6\xa1\x82\x6d\xbb\xf5\x6b\x5c\x55\x0c\x3d\x7c\x5a\x29\x84\x89" +
	"\x66\x02\xcc\x03\xac\x6e\x18\xc3\x8c\x47\x02\x43\xd9\x63\x4a\xb0\x48\x52\x78\x59\xaf\xf8\x00\x0f\x36\x77\x81\x2c" +
	"\xa3\x2f\x18\x8e\x38\x92\x6f\x1f\x55\x7b\x22\xd1\xc8\xb9\xb3\xf1\xc7\xab\xbb\xe3\xdf\x5d\x6a\xdc\x8a\xd4\x43\xf3" +
	"\xf4\xbf\xea\x52\xca\x03\x7c\x6b\x3f\x87\x40\xa9\xfd\x4a\x37\x23\x60\x22\x1c\x48\x2a\xa3\x90\x22\x65\x53\xd0\x25" +
	"\x4c\x80\x0a\x35\x34\x97\x95\x33\x16\x0c\x13\x75\x2b\x06\xed\x9e\x11\x3a\x9f\xcf\xdd\xfa\xe8\xbe\x83\xdb\xf2\xd5" +
	"\x9f\xe3\x31\x7a\x35\x14\xf3\xc6\x25\x06\xf5\x74\xc1\xb9\x24\x52\x7f\x69\xb1\x8e\xf7\x4e\x1e\xf3\x7b\x30\x59\xc8" +
	"\x6d\x2a\x03\x25\x83\x22\x74\x88\x97\x6a\x83\x4d\xf4\x07\xdd\xba\x9e\xb9\x3a\x8b\xd9\x76\x30\x30\x64\xb6\x9a\x28" +
	"\xa8\xe9\x01\x9b\xd0\x20\xf0\x92\x06\x28\xac\x1a\xf7\xe9\x0a\x74\x89\x6a\x7f\xad\x32\x56\xcb\x75\x11\x82\x2b\x2f" +
	"\x72\xcb\xc3\x8c\x16\x26\xd2\xee\x49\xe8\xcb\x3d\x14\xfe\xe7\xef\x50\x25\x1e\x1f\x59\x29\x1c\x8e\x64\xb9\xcc\x5d" +
	"\x15\xa2\xda\x25\x1e\x1b\xf7\x2b\x00\x00\xff\xff\x86\x70\x33\x2f\x86\x03\x00\x00")

func defaultTomlBytes() ([]byte, error) {
	return bindataRead(
		_defaultToml,
		"default.toml",
	)
}

func defaultToml() (*asset, error) {
	bytes, err := defaultTomlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "default.toml", size: 902, md5checksum: "", mode: os.FileMode(420), modTime: time.Unix(1511693306, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, &os.PathError{Op: "open", Path: name, Err: os.ErrNotExist}
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
// nolint: deadcode
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, &os.PathError{Op: "open", Path: name, Err: os.ErrNotExist}
}

// AssetNames returns the names of the assets.
// nolint: deadcode
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"default.toml": defaultToml,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, &os.PathError{Op: "open", Path: name, Err: os.ErrNotExist}
			}
		}
	}
	if node.Func != nil {
		return nil, &os.PathError{Op: "open", Path: name, Err: os.ErrNotExist}
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}

var _bintree = &bintree{nil, map[string]*bintree{
	"default.toml": {defaultToml, map[string]*bintree{}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	return os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}
