// Code generated by go-bindata.
// sources:
// default.toml
// DO NOT EDIT!

package main

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _defaultToml = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x3c\x90\xb1\x8e\xdb\x30\x0c\x86\x77\x3e\x05\xe1\x5b\xda\xc1\x56\x7a\x53\x71\x80\x87\xbe\x42\xa7\x02\x41\x70\x60\x68\xc6\x56\x23\x4b\x02\x49\x27\x69\x9f\xfe\x60\x23\x0e\xb4\x50\x22\xf5\xe9\xd3\x7f\x1c\xc8\xe9\x4c\x26\x27\xa8\xe4\x13\xf6\xd8\xe4\x3a\x77\xc3\xb9\x01\x38\xce\x51\xb5\xe8\x09\x54\xc6\x68\xae\xff\xd6\xee\xe4\x5e\xed\x23\x04\x95\x9a\x22\x93\x4b\x97\xeb\xfc\xd7\x3a\x2e\x73\xd8\xe7\x1a\xe0\x92\x79\x51\x95\xcc\xeb\xa5\xf7\xc3\x0b\xde\xbd\x86\x42\x03\x6f\x18\xb3\x8b\xde\x28\xe1\xa5\x28\x2e\x75\x20\x17\x83\xd7\x61\x8f\x3f\xde\x0f\x00\x47\x13\xbd\x89\x9e\xe0\x1c\xf3\xb0\x42\x0e\xdd\xb6\x1a\xa8\x45\x1d\x7b\xfc\x79\x80\x37\x34\x9e\x64\x16\xa4\x3c\xe0\x54\xcc\xd1\x0b\xce\x74\x15\x74\xd2\x33\xa5\x84\x8b\x26\xc3\x6f\x5b\xab\x5c\x70\xb7\x78\xda\x17\x1d\x43\x25\xbe\xd2\x28\xa1\xdd\xab\xf6\x26\x6a\xb1\xe4\xce\xc7\xff\xdf\xe1\xc9\x7f\x46\xd0\xc0\x46\xea\xb1\x49\x85\x29\xad\x9b\xf5\x3f\x26\x79\xc0\x3f\xed\x2f\x66\x49\xed\x6f\x19\xa2\x0a\x3b\x4e\x42\x83\xe8\x6a\xc4\x29\x4a\x76\x43\x5b\x78\x42\x32\xcc\x63\xcc\x8f\xcd\x99\x2a\xf1\x24\xdd\xc6\x90\x0f\xdc\x63\xbe\xdf\xef\xdd\x36\xf4\x0c\xd8\xca\xa2\x2c\x16\xee\xf1\x1a\x83\x39\xa9\x07\x2f\x35\xb2\x05\x79\xd0\x5c\x93\x58\x78\xb4\xb4\x3e\x1f\xe0\xf1\xb9\x15\x9f\xba\x7b\xf4\x78\xa1\x64\x02\x5f\x01\x00\x00\xff\xff\xca\x5f\x87\x7a\xf5\x01\x00\x00")

func defaultTomlBytes() ([]byte, error) {
	return bindataRead(
		_defaultToml,
		"default.toml",
	)
}

func defaultToml() (*asset, error) {
	bytes, err := defaultTomlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "default.toml", size: 501, mode: os.FileMode(436), modTime: time.Unix(1491131607, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"default.toml": defaultToml,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}
var _bintree = &bintree{nil, map[string]*bintree{
	"default.toml": &bintree{defaultToml, map[string]*bintree{}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}

