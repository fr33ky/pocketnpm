// Code generated by go-bindata.
// sources:
// default.toml
// DO NOT EDIT!

package main

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _defaultToml = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x64\x93\x5d\x6b\xe3\x3c\x10\x85\xef\xf5\x2b\x06\x07\x5e\x12\xa8\xad\xb4\xf4\xa2\x04\xc4\xbb\xbb\xf7\x7b\xb3\xf4\x62\xa1\x84\xa0\xc8\x13\x5b\x8d\xbe\x56\x33\xce\x47\x7f\xfd\x22\x35\x0e\x85\x25\x20\x26\x33\x27\x8f\x4e\xe6\xd8\x6f\xbd\x66\xbd\xd7\x84\x5b\xb1\x80\xb9\x06\xbe\x26\x84\xe5\x3e\x3a\x7e\x80\x21\x66\xbf\x12\xb5\xa3\xa0\x29\xbd\xe6\xab\x34\x69\x1e\x45\x39\xca\x34\x24\xdf\xf5\xfb\x32\xc7\x8b\xf6\xc9\x21\x4c\xa4\x07\x84\x43\xcc\x95\x03\xcb\x91\x39\x6d\xa4\x7c\xb7\xe1\x63\x9c\x3a\x8f\xb2\xb4\xe5\x4c\xeb\x46\xf6\x6e\x61\x62\x08\x68\xd8\x86\xa1\xe5\xd8\xea\x76\x9e\xae\x36\x62\x01\xb7\xab\xde\x1a\x7f\xa5\x3f\xae\x79\x80\x66\x22\xcc\x9b\xa4\x89\xce\x31\xf7\xdf\xc6\x48\x2c\xfb\x7d\xd0\x1e\xff\x37\xa3\xce\x84\xac\x26\x3e\xbc\xfc\x97\x4a\xfd\x6a\x3d\xaa\xd7\x3c\x61\xb3\x85\x05\x54\xc4\x57\x66\x8a\xc4\x43\x46\x2a\xd8\x02\x52\xe5\x80\x72\x81\x2a\x47\x81\xc2\x27\x5b\xa5\x68\x8e\xc8\x21\x79\x20\x72\x3e\xf6\xa8\x7a\x4b\x7a\xef\xca\x46\x3e\xad\x28\x7f\x9d\xcb\x66\x2b\xc4\x02\xbc\xbe\x80\x0d\xad\x47\x1f\xf3\x15\x8c\x36\x23\x02\xd9\x0f\x04\x1b\xe0\xe7\x0f\x58\xae\x41\xc1\x14\x9c\xf5\x96\xb1\x5f\x09\xaf\x2f\xbb\x2a\xda\x55\x91\x82\xa7\xf5\xf3\x8b\x58\xfc\x83\xc0\x93\x35\x6c\x63\x00\xb6\xbe\xb2\xbc\x0d\x13\x23\x89\xcf\x1f\x3b\x7b\xc0\x3a\x51\xf0\xf8\xfc\xbc\x16\xe2\xcd\xdb\x9c\x63\xde\x8a\x8c\x83\x25\xce\xd7\x92\x5c\xc9\x85\x36\x52\x66\x4c\xce\x1a\xcd\xd8\x85\xe4\xdf\xa9\x33\xd1\xcb\x59\xd7\x08\x13\x83\x99\x72\xc6\x60\xae\xd5\xcf\x3d\xf8\xee\x2e\x92\x4d\xb5\xc8\x98\x4f\xda\xd5\xe0\xa7\xd4\xeb\x62\xe7\xde\x54\xf0\xf8\x54\x7c\x10\xe6\x13\xe6\xad\xd8\xdb\xd0\x17\xc8\xba\xab\x9f\x46\xa4\x98\x19\x14\xbc\xac\xc5\x02\xc8\x8c\xe8\x11\x74\xe8\xa1\x86\xc1\x11\xbc\x3e\x22\xb0\xce\x7b\xed\x1c\x4c\xd9\x11\x2c\xeb\x28\x1e\x60\x76\x71\x73\x1f\xf3\x20\x93\x36\x47\x3d\xa0\x6c\xe7\xaa\x3d\x61\x26\x1b\x43\xc7\xc3\xc7\x4a\xdc\xf8\xb7\x15\x34\xa2\x92\x14\x34\x2e\x1a\xed\xca\x97\xf2\x7f\x08\x43\x0f\xbf\xdb\xef\xc6\xa0\x6b\x7f\x61\x6f\x33\x1a\x86\x11\x75\x8f\xb9\x38\x32\xce\x62\x60\x02\x9a\xcc\x08\x9a\x20\x0c\x36\x5c\xaa\x67\x9d\x4a\x08\x5d\x65\xe0\x06\xe6\x35\x9f\xcf\xe7\xae\x8a\x6e\x0b\xa6\x38\x65\x83\x24\xcf\xf6\x68\x25\xb1\xce\x2c\x39\x26\x6b\x48\xde\x5e\x24\x92\x97\x56\x97\xeb\xa5\xb8\xec\x6a\xb1\xcb\xb3\x0f\x05\x07\xed\x08\x85\x8b\xc3\x9c\xc7\xfd\xe9\xec\x8a\x96\xa8\x73\x71\x68\xc4\xdf\x00\x00\x00\xff\xff\x62\xef\x76\x9c\xed\x03\x00\x00")

func defaultTomlBytes() ([]byte, error) {
	return bindataRead(
		_defaultToml,
		"default.toml",
	)
}

func defaultToml() (*asset, error) {
	bytes, err := defaultTomlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "default.toml", size: 1005, mode: os.FileMode(420), modTime: time.Unix(1491459675, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"default.toml": defaultToml,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}
var _bintree = &bintree{nil, map[string]*bintree{
	"default.toml": &bintree{defaultToml, map[string]*bintree{}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}

