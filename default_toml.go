// Code generated by go-bindata.
// sources:
// default.toml
// DO NOT EDIT!

package main

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _defaultToml = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x6c\x51\xbd\x6e\x1b\x31\x0c\xde\xf5\x14\xc4\x79\x68\x32\x58\x4a\x33\x15\x01\x3c\x14\xe8\x13\x34\x4b\x01\xc3\x08\x68\x89\x3e\xa9\xd6\x49\x02\xc9\xf3\x4f\x9f\xbe\xd0\xd5\x97\xa9\xb8\x85\x27\x92\xdf\x0f\xbf\x7d\x40\xc5\x23\x0a\x1d\xcc\x06\xd6\x1a\x1a\x6a\x84\xa7\x90\x98\xbc\x56\xbe\x3f\x9b\x0d\x24\x85\x6b\xca\x19\x8e\x04\x9e\x09\x95\x02\xa4\x53\x7f\x0d\x95\xa4\x7c\x51\xa0\x5b\x12\xb5\x66\x03\xb3\xa4\x32\xc2\xfb\xfb\x0f\x48\x02\x31\x8d\x31\xdf\x81\xc9\xd7\x69\xa2\x12\x28\x40\x24\x26\x6b\x16\x8a\x1d\x0c\xe1\x38\x18\xb3\x9f\x12\x73\xe5\x83\x61\x1a\x93\x28\xdf\x7b\x27\xaa\x36\x79\x73\x8e\xa9\xe5\xe4\x51\xc9\x96\x36\xfd\x16\xeb\xeb\xe4\xd6\xb9\xc1\xf8\x5a\xfc\xcc\x4c\xc5\xf7\xa5\xd7\x17\xb3\x01\xd1\xca\x38\xfe\xc7\xc5\xca\x69\x3f\xf7\xdd\xd0\xad\x15\x25\xbe\x60\x86\x53\x65\xf0\x91\xfc\xb9\x1b\x98\x5b\x40\x25\x31\x9f\xdd\x1d\x7c\x7d\x7d\x31\x66\x2f\xc4\x17\xe2\x83\x39\xa6\x12\x3a\xda\x8b\x5d\xbe\xc1\xb4\xca\x0a\x3b\xf8\xb6\x68\xf0\x91\x26\x02\x2c\x01\x62\x15\x05\xad\x30\xe1\x99\x40\x91\x8f\x98\x33\xcc\x9c\x05\x9e\x96\x56\x3d\xc1\x2a\xe7\xe1\xb0\xf2\xe8\x1a\xfa\x33\x8e\xe4\xb6\x6b\xb5\xbd\x10\x4b\xaa\xc5\xea\xf8\xe7\xd9\x3c\xf0\x1f\x67\x1a\xcc\x82\xb4\x83\x21\x57\x8f\xb9\xff\x74\x63\x42\x25\xc0\xaf\xed\x77\xef\x29\x6f\x7f\xd2\xbf\x4b\x40\x24\x0c\xc4\x5d\x91\xcf\x89\x8a\x0a\xc8\xec\x23\xa0\x40\x19\x53\xb9\x2d\x9a\xb1\xa1\x8f\x64\x17\x0c\x7a\x83\x35\x8a\xeb\xf5\x6a\x97\xa1\x47\x08\x52\x67\xf6\x24\xee\x9a\xce\xc9\x89\x22\xab\xd3\xda\x92\x17\x47\x37\x9c\x5a\x26\x71\xb7\x2d\x76\x7a\x67\x6e\x1f\x4b\xf1\xc1\xab\x8e\x1d\x9c\x30\x0b\x99\x5c\xc7\x35\x98\x56\xfd\x99\xb4\xb4\xc9\xf6\x59\x11\x9b\xeb\x38\x98\xbf\x01\x00\x00\xff\xff\x9e\xbb\x94\xb8\xa4\x02\x00\x00")

func defaultTomlBytes() ([]byte, error) {
	return bindataRead(
		_defaultToml,
		"default.toml",
	)
}

func defaultToml() (*asset, error) {
	bytes, err := defaultTomlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "default.toml", size: 676, mode: os.FileMode(436), modTime: time.Unix(1509978341, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"default.toml": defaultToml,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}
var _bintree = &bintree{nil, map[string]*bintree{
	"default.toml": &bintree{defaultToml, map[string]*bintree{}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}

